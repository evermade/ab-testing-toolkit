/*!  @evermade/ab-testing-toolkit 1.0.0 */
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).Menu={})}(this,(function(e){"use strict";e.abTestManager=function(){const e=new Map,t=[],a="ab-test-manager",n=()=>(new Date).getTime(),o=()=>{let e={};const t=localStorage.getItem(a);if(t){try{e=JSON.parse(t)}catch(e){console.error(e),localStorage.removeItem(a)}const o=n();try{const t=Object.values(e).filter((e=>e.expiration>o));t.length!==Object.values(e).length&&(e={},t.forEach((t=>{e[t.testId]=t})))}catch(t){e={},console.error(t),localStorage.removeItem(a)}}return Object.values(e).length>0?e:{}},r=(e,t)=>{const r=o(),s={testId:e,variantSlug:t,expiration:n()+31536e6};r[e]=s,localStorage.setItem(a,JSON.stringify(r))};return{register:t=>{t=Object.assign({debug:!1,useDataLayer:!0},t);if(new URLSearchParams(window.location.search).get("ab-test-debug")&&(t.debug=!0),(e=>{const{id:t,variants:a}=e;if(!t)throw new Error("A test ID is required");if(!a||a.length<2)throw new Error("A test must have at least 2 variants");a.forEach((e=>{const{name:t,slug:a}=e;if(!t)throw new Error("A variant must have a name");if(!a)throw new Error("A variant must have a slug")}))})(t),e.set(t.id,t),t.debug){const e=window.location.href.split("?")[0],a=t.variants.map((a=>`| Variant: ${a.name} (slug: ${a.slug}) => ${e}?ab-test=${t.id}&ab-variant=${a.slug}`));console.log(`🧑‍⚕️ [${t.id}]: Test registered: ${t.name}`,...a)}},run:a=>{const n=e.get(a);if(!n)return void console.log(`🧑‍⚕️ [${a}] No test by id`);const{variants:s,debug:i,onBeforeRun:l,onAfterRun:c,useDataLayer:u,dataLayerEventName:g}=n;let d;const f=new URLSearchParams(window.location.search),h=f.get("ab-test"),m=f.get("ab-variant");if(h===a&&m){const e=s.find((e=>e.slug===m));e&&(d=e,i&&console.log(`🧑‍⚕️ [${a}] Variant chosen by URL parameter: ${null==d?void 0:d.name}`))}if(!d){const e=(e=>{const t=o()[e];return!!t&&t.variantSlug})(a);if(e){const t=s.find((t=>t.slug===e));t&&(d=t,i&&console.log(`🧑‍⚕️ [${a}] Variant chosen by local storage: ${null==d?void 0:d.name}`))}}if(!d){d=s[Math.floor(Math.random()*s.length)],r(a,d.slug),i&&console.log(`🧑‍⚕️ [${a}] Variant randomly chosen: ${null==d?void 0:d.name}`)}if(t.includes(a)&&i&&console.warn(`🧑‍⚕️ [${a}] Multiplte runs of test`),d){if(i&&console.log(`🧑‍⚕️ [${a}] Running...`),l&&l(d),"function"==typeof d.onRun&&d.onRun(),c&&c(d),t.push(a),u){const e={event:g||"ABTest",testId:a,testName:n.name,variantSlug:d.slug,variantName:d.name};i&&console.log(`🧑‍⚕️ [${a}] Pushing data layer...`,e),window.dataLayer=window.dataLayer||[],window.dataLayer.push(e)}i&&console.log(`🧑‍⚕️ [${a}] Ready`)}else console.log(`🧑‍⚕️ [${a}] No variant selected for test`)},deleteSavedVariant:e=>{const t=o();delete t[e],localStorage.setItem(a,JSON.stringify(t))}}},Object.defineProperty(e,"__esModule",{value:!0})}));
